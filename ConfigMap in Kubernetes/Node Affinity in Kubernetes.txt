Node Affinity in Kubernetes
Node Affinity is used to control how pods are scheduled on specific nodes in the cluster. It allows you to define rules that ensure a pod is hosted on a node with specific labels. It works with expressions, making it more flexible compared to basic node selectors.

There are two types of policies in node affinity:

requiredDuringSchedulingIgnoredDuringExecution: This ensures that the pod can only be scheduled on nodes that match the specified affinity rules.
preferredDuringSchedulingIgnoredDuringExecution: This provides a preference for nodes, but if a matching node isn't available, the pod can still be scheduled on other nodes.

Example Process for Node Affinity Setup

Step 1: Label the Node
Label the node where you want the pod to be scheduled. This step adds specific labels to the node, which will later be referenced in the pod's affinity rules.
kubectl label node <node-name> disktype=gpu

Verify the labels on the node:
kubectl get nodes --show-labels

Step 2: Create a Pod with Node Affinity
Use the following YAML files to define node affinity for pods:

Example 1: Using requiredDuringSchedulingIgnoredDuringExecution
This rule ensures that the pod is only scheduled on nodes with disktype labels that are ssd or gpu.
apiVersion: v1
kind: Pod
metadata:
  name: nginx-new
spec:
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: disktype
            operator: In
            values:
            - ssd
            - gpu


Example 2: Combining Required and Preferred Affinity
Here, the pod must be scheduled on nodes with the mynode=worker-1 label, but it prefers nodes with mynode=worker-3.
apiVersion: v1
kind: Pod
metadata:
  name: with-node-affinity
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: mynode
            operator: In
            values:
            - worker-1
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: mynode
            operator: In
            values:
            - worker-3
  containers:
  - name: nginx
    image: nginx

Example 3: Using preferredDuringSchedulingIgnoredDuringExecution
This rule prefers nodes with the disktype=ssd label, but if such nodes are unavailable, the pod can still be scheduled on other nodes.
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: disktype
            operator: In
            values:
            - ssd
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent

Step 3: Apply the YAML Files
After defining your pod with the desired node affinity, apply the file:
kubectl apply -f <yaml-file-name>

Step 4: Verify the Node Where the Pod is Running
Check the pod's status and the node it's running on:
kubectl get pods -o wide

