Setting Up a LoadBalancer with MetalLB in Kubernetes
This guide walks you through the steps to set up MetalLB, a load balancer implementation for bare metal Kubernetes clusters, and create a LoadBalancer service.

Step 1: Install MetalLB

Create the MetalLB namespace:
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml

Install MetalLB:
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml

Step 2: Configure MetalLB

Create a configuration file: Open a temporary YAML file for the MetalLB configuration:
vim /tmp/metallb.yam
Add the following configuration: Adjust the address range based on your network setup:
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - 192.168.0.240-192.168.0.250  # Adjust this range based on your network

Create the ConfigMap:
kubectl create -f /tmp/metallb.yaml

Step 3: Deploy an Nginx Application
Create the Nginx deployment:

kubectl create deploy nginx --image nginx:latest

Verify the deployment: Check all resources to ensure the deployment is running:
kubectl get all

Step 4: Expose the Nginx Deployment with LoadBalancer
Expose the Nginx deployment: Create a LoadBalancer service that exposes the Nginx application:

kubectl expose deploy nginx --port 80 --type=LoadBalancer

Check the service: After a few moments, you can check the service to see if it has been assigned an external IP:
kubectl get svc

Summary
  - You have installed MetalLB in your Kubernetes cluster and configured it to manage LoadBalancer services.
  - An Nginx deployment was created and exposed via a LoadBalancer service, allowing external traffic to access the Nginx application.

Make sure the IP range specified in your MetalLB configuration is within the subnet of your local network and is not used by other devices. Adjust the configurations based on your environment as needed.
